from json import load
from Utilities import removeDup

class Mappings:

    def __init__(self,apiVocabFile='NewAPIVOCAB.txt',apiMappingsFile='consolidated_json_with_comments.json'):
        self.apiVocabFile=apiVocabFile
        self.apiMappingsDict={}
        self.apiMappingsFile=apiMappingsFile
        self.readVocabFile(apiVocabFile)
        self.appendMissingMappingsToVocab()
        self.vocabToDict()
        self.createMappingsDictionary()
        self.fixMappings()
        
        
    def readVocabFile(self,apiVocabFile):
        self.apiVocab=[]
        with open(apiVocabFile,'r',encoding='utf-8') as f:
            for lines in f:
                self.apiVocab.append(lines.lower().strip('\n'))       
        
    def appendToVocabFile(self,apiVocabFile,element):
        with open(apiVocabFile,'a',encoding='utf-8') as f:  
            f.write(element.lower().strip('\n'))
            f.write('\n')
            self.apiVocab.append(element.lower().strip('\n'))
            
    def loadMappings(self):
        cleanedJSON=[]
        with open(self.apiMappingsFile,'r') as f:
            mappings=load(f)
        for e in mappings:
            if ('f_1' in e.keys() and 'name' in e.keys()):
                cleanedJSON.append(e)
        return cleanedJSON
    
    def findUniqueMappings(self):
        mappingsJSON=self.loadMappings()
        mappingsAPI=[]
        for mappings in mappingsJSON:
            for keys in mappings:
                if 'comment' in keys:
                    continue
                mappingsAPI.append(mappings[keys])
        mappingsAPI=list(set(mappingsAPI))
        return mappingsAPI
        
    def appendMissingMappingsToVocab(self):
        mappingsAPI=self.findUniqueMappings()
        for mappings in mappingsAPI:
            if not mappings.lower().strip('\n') in self.apiVocab:
                self.apiVocab.append(mappings.lower().strip('\n'))
                self.appendToVocabFile(self.apiVocabFile,mappings)
                
    def vocabToDict(self):
        self.apiVocabDict={}
        for item in self.apiVocab:
                self.apiVocabDict[item.lower().strip('\n')]=self.apiVocab.index(item)+1
    
    def fixMappings(self):             
        keys=list(self.apiMappingsDict.keys())
        alts={}
        revNameDict={}
        for i in self.apiVocabDict.keys():
            revNameDict[self.apiVocabDict[i]]=i
        for k in keys:
            for maps in self.apiMappingsDict[k].keys():
                if ((not '_comment' in maps) and (('f_' in maps) and (not 'name' in maps))) and (not self.apiMappingsDict[k][maps] in keys):
                    alts[self.apiMappingsDict[k][maps]]=self.apiMappingsDict[k]
        for altkeys in alts.keys():
            newkeys=[]
            if altkeys not in keys:
                self.apiMappingsDict[altkeys]={}
                for maps in alts[altkeys].keys():
                    if '_comment' in maps and not 'f_' in maps:
                        continue
                    if maps == 'name':
                        name=revNameDict[altkeys]
                        continue
                    if altkeys == alts[altkeys][maps]:
                        samekey=maps
                    else:
                        newkeys.append(maps)
            self.apiMappingsDict[altkeys][samekey]=alts[altkeys][samekey]
            self.apiMappingsDict[altkeys]['name']=name
            for s in newkeys:
                self.apiMappingsDict[altkeys][s]=alts[altkeys][s]
        
    def createMappingsDictionary(self):
        self.appendMissingMappingsToVocab()
        self.vocabToDict()
        mappings=self.loadMappings()
        for apis in self.apiVocab:
            for maps in mappings:
                if apis.lower().strip('\n') == maps['name'].lower().strip('\n'):
                    encoding=self.apiVocabDict[apis.lower().strip('\n')]
                    self.apiMappingsDict[encoding]={}
                    self.apiMappingsDict[encoding]['name']=apis.lower().strip('\n')
                    for keys in maps.keys():
                        if 'f_' in keys and not '_comment' in keys:
                            self.apiMappingsDict[encoding][keys]=self.apiVocabDict[maps[keys].lower().strip('\n')] 
    
    def Custom_Embedding(self,data,art=None):   
        Embed=[]    
        for lines in data:
            temp=[]
            for items in lines.split():
                if items == '0' or items == '1':
                    continue
                if not items in self.apiVocabDict.keys():
                    continue
                temp.append(self.apiVocabDict[items.lower()])
            Embed.append(temp)        
        temp=Embed[0]
        Embed[0]=removeDup(Embed[0])      
        return Embed