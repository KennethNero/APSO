[
    {
        "f_1": "GetCursorPos",
        "name": "GetCursorInfo"
    },
    {
        "f_1": "GetPhysicalCursorPos",
        "name": "GetCursorPos"
    },
    {
        "f_1": "GetCursorPos",
        "name": "GetPhysicalCursorPos"
    },
    {
        "f_1": "LoadImageA",
        "f_2": "LoadCursorFromFile",
        "name": "LoadCursor"
    },
    {
        "f_1": "LoadCursor",
        "f_2": "LoadImageA",
        "name": "LoadCursorFromFile"
    },
    {
        "f_1": "ClipCursor",
        "f_2": "SetPhysicalCursorPos",
        "name": "SetCursorPos"
    },
    {
        "f_1": "SetCursorPos",
        "name": "SetPhysicalCursorPos"
    },
    {
        "f_1": "CreateIcon",
        "name": "CopyImage"
    },
    {
        "f_1": "CreateIcon",
        "name": "CreateIconIndirect"
    },
    {
        "f_1": "CreateIconIndirect",
        "f_2": "CreateIconFromResource",
        "name": "CreateIcon"
    },
    {
        "f_1": "DestroyCursor",
        "name": "DestroyIcon"
    },
    {
        "f_1": "DrawIconEx",
        "name": "DrawIcon"
    },
    {
        "f_1": "DrawIcon",
        "name": "DrawIconEx"
    },
    {
        "f_1": "CopyIcon",
        "name": "DuplicateIcon"
    },
    {
        "f_1": "ExtractIconEx",
        "f_2": "ExtractIcon",
        "name": "ExtractAssociatedIcon"
    },
    {
        "f_1": "ExtractAssociatedIcon",
        "f_2": "ExtractIconEx",
        "name": "ExtractIcon"
    },
    {
        "f_1": "ExtractAssociatedIcon",
        "f_2": "ExtractIcon",
        "name": "ExtractIconEx"
    },
    {
        "f_1": "GetIconInfoEx",
        "name": "GetIconInfo"
    },
    {
        "f_1": "GetIconInfo",
        "name": "GetIconInfoEx"
    },
    {
        "f_1": "LoadImage",
        "name": "LoadIcon"
    },
    {
        "f_1": "SetMenuItemInfo",
        "f_2": "CheckMenuRadioItem",
        "name": "CheckMenuItem"
    },
    {
        "f_1": "SetMenuItemInfo",
        "f_2": "CheckMenuRadioItem",
        "name": "CheckMenuRadioItem"
    },
    {
        "f_1": "DestroyMenu",
        "name": "DeleteMenu"
    },
    {
        "f_1": "DeleteMenu",
        "name": "DestroyMenu"
    },
    {
        "f_1": "GetMenuItemID",
        "f_2": "GetMenuItemInfo",
        "name": "GetMenuItemCount"
    },
    {
        "f_1": "GetMenuItemInfo",
        "name": "GetMenuItemID"
    },
    {
        "f_1": "GetMenuItemID",
        "name": "GetMenuItemInfo"
    },
    {
        "f_1": "InsertMenuItem",
        "name": "InsertMenu"
    },
    {
        "f_1": "InsertMenu",
        "name": "InsertMenuItem"
    },
    {
        "f_1": "LoadMenuIndirect",
        "name": "LoadMenu"
    },
    {
        "f_1": "LoadMenu",
        "name": "LoadMenuIndirect"
    },
    {
        "f_1": "SetMenuItemInfo",
        "name": "ModifyMenu"
    },
    {
        "f_1": "DeleteMenu",
        "f_2": "DestroyMenu",
        "name": "RemoveMenu"
    },
    {
        "f_1": "ModifyMenu",
        "f_2": "CheckMenuItem",
        "name": "SetMenuItemInfo"
    },
    {
        "f_1": "LoadStringA",
        "f_2": "LoadStringW",
        "name": "LoadString"
    },
    {
        "f_1": "GetFileVersionInfoEx",
        "name": "GetFileVersionInfo"
    },
    {
        "f_1": "GetFileVersionInfo",
        "name": "GetFileVersionInfoEx"
    },
    {
        "f_1": "GetFileVersionInfoSizeEx",
        "name": "GetFileVersionInfoSize"
    },
    {
        "f_1": "GetFileVersionInfoSize",
        "name": "GetFileVersionInfoSizeEx"
    },
    {
        "f_1": "AdjustWindowRectEx",
        "name": "AdjustWindowRect"
    },
    {
        "f_1": "AdjustWindowRect",
        "name": "AdjustWindowRectEx"
    },
    {
        "f_1": "SetWindowPos",
        "name": "BringWindowToTop"
    },
    {
        "f_1": "ChangeWindowMessageFilterEx",
        "name": "ChangeWindowMessageFilter"
    },
    {
        "f_1": "ChangeWindowMessageFilter",
        "name": "ChangeWindowMessageFilterEx"
    },
    {
        "f_1": "ChildWindowFromPointEx",
        "name": "ChildWindowFromPoint"
    },
    {
        "f_1": "ChildWindowFromPoint",
        "name": "ChildWindowFromPointEx"
    },
    {
        "f_1": "DestroyWindow",
        "name": "CloseWindow"
    },
    {
        "f_1": "CreateWindow",
        "name": "CreateWindowEx"
    },
    {
        "f_1": "CloseWindow",
        "name": "DestroyWindow"
    },
    {
        "f_1": "GetTopWindow",
        "f_2": "GetWindow",
        "name": "EnumChildWindows"
    },
    {
        "f_1": "FindWindowEx",
        "f_2": "EnumWindows",
        "f_3": "RealGetWindowClass",
        "name": "FindWindow"
    },
    {
        "f_1": "FindWindow",
        "f_2": "EnumWindows",
        "name": "FindWindowEx"
    },
    {
        "f_1": "GetParent",
        "name": "GetAncestor"
    },
    {
        "f_1": "GetWindowRect",
        "name": "GetClientRect"
    },
    {
        "f_1": "GetAncestor",
        "name": "GetParent"
    },
    {
        "f_1": "EnumChildWindows",
        "name": "GetTopWindow"
    },
    {
        "f_1": "GetTopWindow",
        "name": "GetWindow"
    },
    {
        "f_1": "IsWindowVisible",
        "f_2": "GetWindowInfo",
        "name": "GetWindowPlacement"
    },
    {
        "f_1": "GetClientRect",
        "name": "GetWindowRect"
    },
    {
        "f_1": "InternalGetWindowText",
        "name": "GetWindowText"
    },
    {
        "f_1": "GetWindowText",
        "name": "GetWindowTextLength"
    },
    {
        "f_1": "GetWindowText",
        "name": "InternalGetWindowText"
    },
    {
        "f_1": "IsZoomed",
        "name": "IsIconic"
    },
    {
        "f_1": "GetWindowPlacement",
        "name": "IsWindowVisible"
    },
    {
        "f_1": "IsIconic",
        "name": "IsZoomed"
    },
    {
        "f_1": "SetWindowPos",
        "name": "MoveWindow"
    },
    {
        "comments": "Lets us use functions like WindowFromPhysicalPoint & WindowFromPoint Interchangeably\n",
        "name": "PhysicalToLogicalPoint"
    },
    {
        "f_1": "FindWindow",
        "name": "RealGetWindowClass"
    },
    {
        "f_1": "SwitchToThisWindow",
        "name": "SetForegroundWindow"
    },
    {
        "f_1": "UpdateLayeredWindow",
        "f_2": "UpdateLayeredWindowIndirect",
        "name": "SetLayeredWindowAttributes"
    },
    {
        "f_1": "BringWindowToTop",
        "f_2": "DeferWindowPos",
        "name": "SetWindowPos"
    },
    {
        "f_1": "SetWindowPos",
        "f_2": "DeferWindowPos",
        "f_3": "SetWindowPlacement",
        "name": "SetActiveWindow"
    },
    {
        "f_1": "ShowWindowAsync",
        "f_2": "SetWindowPos",
        "f_3": "DeferWindowPos",
        "f_4": "SetWindowPlacement",
        "f_5": "SetWindowLong",
        "name": "ShowWindow"
    },
    {
        "f_1": "ShowWindow",
        "f_2": "SetWindowPos",
        "f_3": "DeferWindowPos",
        "f_4": "SetWindowPlacement",
        "f_5": "SetWindowLong",
        "name": "ShowWindowAsync"
    },
    {
        "f_1": "SetForegroundWindow",
        "name": "SwitchToThisWindow"
    },
    {
        "f_1": "UpdateLayeredWindowIndirect",
        "name": "UpdateLayeredWindow"
    },
    {
        "f_1": "UpdateLayeredWindow",
        "name": "UpdateLayeredWindowIndirect"
    },
    {
        "f_1": "WindowFromPoint",
        "name": "WindowFromPhysicalPoint"
    },
    {
        "f_1": "WindowFromPhysicalPoint",
        "name": "WindowFromPoint"
    },
    {
        "f_1": "CheckTokenMembershipEx",
        "name": "CheckTokenMembership"
    },
    {
        "f_1": "DuplicateTokenEx",
        "f_2": "DuplicateToken",
        "name": "CreateRestrictedToken"
    },
    {
        "f_1": "CreateRestrictedToken",
        "f_2": "DuplicateToken",
        "name": "DuplicateTokenEx"
    },
    {
        "f_1": "DuplicateTokenEx",
        "f_2": "CreateRestrictedToken",
        "name": "DuplicateToken"
    },
    {
        "f_1": "CheckTokenMembership",
        "name": "GetTokenInformation"
    },
    {
        "f_1": "BuildCommDCBAndTimeouts",
        "name": "BuildCommDCB"
    },
    {
        "f_1": "BuildCommDCB",
        "name": "BuildCommDCBAndTimeouts"
    },
    {
        "f_1": "SetCommTimeouts",
        "f_2": "SetCommState",
        "name": "SetCommState"
    },
    {
        "f_1": "CloseHandle",
        "name": "CloseDesktop"
    },
    {
        "f_1": "OpenInputDesktop",
        "name": "OpenDesktop"
    },
    {
        "f_1": "OpenDesktop",
        "name": "OpenInputDesktop"
    },
    {
        "f_1": "GetOverlappedResultEx",
        "name": "GetOverlappedResult"
    },
    {
        "f_1": "GetOverlappedResult",
        "name": "GetOverlappedResultEx"
    },
    {
        "f_1": "AcquireSRWLockShared",
        "f_2": "TryAcquireSRWLockExclusive",
        "name": "AcquireSRWLockExclusive"
    },
    {
        "f_1": "AcquireSRWLockExclusive",
        "name": "AcquireSRWLockShared"
    },
    {
        "f_1": "AcquireSRWLockExclusive",
        "name": "TryAcquireSRWLockExclusive"
    },
    {
        "f_1": "InitializeCriticalSectionAndSpinCount",
        "f_2": "InitializeCriticalSectionEx",
        "name": "InitializeCriticalSection"
    },
    {
        "f_1": "InitializeCriticalSection",
        "f_2": "InitializeCriticalSectionEx",
        "name": "InitializeCriticalSectionAndSpinCount"
    },
    {
        "f_1": "InitializeCriticalSection",
        "f_2": "InitializeCriticalSectionAndSpinCount",
        "name": "InitializeCriticalSectionEx"
    },
    {
        "f_1": "TryEnterCriticalSection",
        "name": "EnterCriticalSection"
    },
    {
        "f_1": "InitializeCriticalSectionAndSpinCount",
        "name": "SetCriticalSectionSpinCount"
    },
    {
        "f_1": "EnterCriticalSection",
        "name": "TryEnterCriticalSection"
    },
    {
        "f_1": "CreateEventEx",
        "f_2": "OpenEvent",
        "name": "CreateEvent"
    },
    {
        "f_1": "CreateEvent",
        "f_2": "OpenEvent",
        "name": "CreateEventEx"
    },
    {
        "f_1": "CreateEvent",
        "f_2": "CreateEventEx",
        "name": "OpenEvent"
    },
    {
        "f_1": "ResetEvent",
        "name": "PulseEvent"
    },
    {
        "f_1": "SetEvent",
        "name": "PulseEvent"
    },
    {
        "f_1": "PulseEvent",
        "name": "ResetEvent"
    },
    {
        "f_1": "PulseEvent",
        "name": "SetEvent"
    },
    {
        "comments": " Depending on the requirements, this can be used in place of functionality which ensures single execution",
        "name": "InitOnceExecuteOnce"
    },
    {
        "f_1": "CreateMutexEx",
        "f_2": "OpenMutex",
        "name": "CreateMutex"
    },
    {
        "f_1": "CreateMutex",
        "f_2": "OpenMutex",
        "name": "CreateMutexEx"
    },
    {
        "f_1": "CreateMutexEx",
        "f_2": "CreateMutex",
        "name": "OpenMutex"
    },
    {
        "comments": " Can potentially use CloseHandle. Closes if the process terminates",
        "name": "ClosePrivateNamespace"
    },
    {
        "f_1": "CreateSemaphoreEx",
        "f_2": "OpenSemaphore",
        "name": "CreateSemaphore"
    },
    {
        "f_1": "CreateSemaphore",
        "f_2": "OpenSemaphore",
        "name": "CreateSemaphoreEx"
    },
    {
        "f_1": "CreateSemaphore",
        "f_2": "CreateSemaphoreEx",
        "name": "OpenSemaphore"
    },
    {
        "f_1": "CreateTimerQueueTimer",
        "name": "ChangeTimerQueueTimer"
    },
    {
        "f_1": "ChangeTimerQueueTimer",
        "name": "CreateTimerQueueTimer"
    },
    {
        "comments": " Can wait for:Change notification\nConsole input\nEvent\nMemory resource notification\nMutex\nProcess\nSemaphore\nThread\nWaitable timer\n\nCan probably use with functions of the above mentioned objects\n\n",
        "name": "RegisterWaitForSingleObject"
    },
    {
        "f_1": "WaitForSingleObject",
        "name": "SignalObjectAndWait"
    },
    {
        "f_1": "WaitForSingleObjectEx",
        "name": "WaitForSingleObject"
    },
    {
        "f_1": "WaitForSingleObject",
        "name": "WaitForSingleObjectEx"
    },
    {
        "f_1": "CreateWaitableTimerEx",
        "name": "CreateWaitableTimer"
    },
    {
        "f_1": "CreateWaitableTimer",
        "name": "CreateWaitableTimerEx"
    },
    {
        "f_1": "BackupEventLog",
        "name": "ReadEventLog"
    },
    {
        "f_1": "CloseHandle",
        "name": "DeregisterEventSource"
    },
    {
        "f_1": "CopyFile",
        "name": "CreateFile"
    },
    {
        "f_1": "GetSecurityInfo",
        "name": "GetNamedSecurityInfo"
    },
    {
        "f_1": "GetNamedSecurityInfo",
        "name": "GetSecurityInfo"
    },
    {
        "f_1": "SetSecurityInfo",
        "name": "SetNamedSecurityInfo"
    },
    {
        "f_1": "SetNamedSecurityInfo",
        "name": "SetSecurityInfo"
    },
    {
        "f_1": "AllocateUserPhysicalPagesNuma",
        "name": "AllocateUserPhysicalPages"
    },
    {
        "name": "AllocateUserPhysicalPagesNuma",
        "f_1": "AllocateUserPhysicalPages"
    },
    {
        "f_1": "RtlCopyMemory",
        "f_2": "MoveMemory",
        "name": "CopyMemory"
    },
    {
        "f_1": "CreateFileMappingNuma",
        "name": "CreateFileMapping"
    },
    {
        "f_1": "CreateFileMapping",
        "name": "CreateFileMappingNuma"
    },
    {
        "f_1": "HeapAlloc",
        "name": "GlobalAlloc"
    },
    {
        "f_1": "GlobalMemoryStatusEx",
        "name": "GlobalMemoryStatus"
    },
    {
        "f_1": "HeapReAlloc",
        "name": "HeapAlloc"
    },
    {
        "f_1": "MapViewOfFileEx",
        "f_2": "MapViewOfFileExNuma",
        "name": "MapViewOfFile"
    },
    {
        "f_1": "MapViewOfFile",
        "f_2": "MapViewOfFileExNuma",
        "name": "MapViewOfFileEx"
    },
    {
        "f_1": "MapViewOfFile",
        "f_2": "MapViewOfFileEx",
        "name": "MapViewOfFileExNuma"
    },
    {
        "f_1": "MapUserPhysicalPagesScatter",
        "name": "MapUserPhysicalPages"
    },
    {
        "f_1": "RtlMoveMemory",
        "f_2": "CopyMemory",
        "f_3": "FillMemory",
        "name": "MoveMemory"
    },
    {
        "f_1": "FillMemory",
        "name": "SecureZeroMemory"
    },
    {
        "f_1": "UnmapViewOfFileEx",
        "name": "UnmapViewOfFile"
    },
    {
        "f_1": "UnmapViewOfFile",
        "f_2": "UnmapViewOfFile2",
        "name": "UnmapViewOfFileEx"
    },
    {
        "f_1": "VirtualAlloc",
        "f_2": "VirtualAllocExNuma",
        "name": "VirtualAlloc"
    },
    {
        "f_1": "VirtualAlloc",
        "f_2": "VirtualAllocExNuma",
        "name": "VirtualAllocEx"
    },
    {
        "f_1": "VirtualAlloc",
        "f_2": "VirtualAllocEx",
        "name": "VirtualAllocExNuma"
    },
    {
        "f_1": "VirtualFreeEx",
        "name": "VirtualFree"
    },
    {
        "f_1": "VirtualFree",
        "name": "VirtualFreeEx"
    },
    {
        "f_1": "VirtualProtectEx",
        "name": "VirtualProtect"
    },
    {
        "f_1": "VirtualProtect",
        "name": "VirtualProtectEx"
    },
    {
        "f_1": "VirtualQueryEx",
        "name": "VirtualQuery"
    },
    {
        "f_1": "VirtualQuery",
        "name": "VirtualQueryEx"
    },
    {
        "f_1": "FillMemory",
        "f_2": "SecureZeroMemory",
        "name": "ZeroMemory"
    },
    {
        "f_1": "CreateFile",
        "name": "CallNamedPipe"
    },
    {
        "name": "CreateFile",
        "f_1": "CallNamedPipe"
    },
    {
        "f_1": "CreateFile",
        "name": "CreateNamedPipe"
    },
    {
        "f_1": "CreateNamedPipe",
        "name": "CreatePipe"
    },
    {
        "f_1": "GetNamedPipeClientProcessId",
        "f_2": "GetNamedPipeHandleState",
        "f_3": "PeekNamedPipe",
        "name": "GetNamedPipeClientComputerName"
    },
    {
        "f_1": "GetNamedPipeClientComputerName",
        "f_2": "GetNamedPipeHandleState",
        "f_3": "PeekNamedPipe",
        "name": "GetNamedPipeClientProcessId"
    },
    {
        "f_1": "GetNamedPipeClientProcessId",
        "f_2": "GetNamedPipeClientComputerName",
        "f_3": "PeekNamedPipe",
        "name": "GetNamedPipeHandleState"
    },
    {
        "f_1": "GetNamedPipeClientProcessId",
        "f_2": "GetNamedPipeClientComputerName",
        "f_3": "GetNamedPipeHandleState",
        "name": "PeekNamedPipe"
    },
    {
        "f_1": "AvRtCreateThreadOrderingGroupEx",
        "name": "AvRtCreateThreadOrderingGroup"
    },
    {
        "f_1": "AvRtCreateThreadOrderingGroup",
        "name": "AvRtCreateThreadOrderingGroupEx"
    },
    {
        "f_1": "CreateFiberEx",
        "f_2": "ConvertThreadToFiberEx",
        "f_3": "ConvertThreadToFiber",
        "name": "CreateFiber"
    },
    {
        "f_1": "CreateFiber",
        "f_2": "ConvertThreadToFiberEx",
        "f_3": "ConvertThreadToFiber",
        "name": "CreateFiberEx"
    },
    {
        "f_1": "CreateProcessAsUser",
        "f_2": "CreateProcessWithLogonW",
        "f_3": "CreateProcessWithTokenW",
        "name": "CreateProcess"
    },
    {
        "f_1": "CreateProcess",
        "f_2": "CreateProcessWithLogonW",
        "f_3": "CreateProcessWithTokenW",
        "name": "CreateProcessAsUser"
    },
    {
        "f_1": "CreateProcessAsUser",
        "f_2": "CreateProcess",
        "f_3": "CreateProcessWithTokenW",
        "name": "CreateProcessWithLogonW"
    },
    {
        "f_1": "CreateProcessAsUser",
        "f_2": "CreateProcess",
        "f_3": "CreateProcessWithLogonW",
        "name": "CreateProcessWithTokenW"
    },
    {
        "f_1": "CreateRemoteThreadEx",
        "name": "CreateRemoteThread"
    },
    {
        "f_1": "CreateRemoteThread",
        "name": "CreateRemoteThreadEx"
    },
    {
        "f_1": "CreateJobObject",
        "name": "CreateThreadpoolIo"
    },
    {
        "f_1": "CreateJobObject",
        "name": "CreateThreadpoolWork"
    },
    {
        "f_1": "SleepConditionVariableSRW",
        "name": "SleepConditionVariableCS"
    },
    {
        "f_1": "SleepConditionVariableCS",
        "name": "SleepConditionVariableSRW"
    },
    {
        "f_1": "RtlInterlockedPopEntrySList",
        "name": "InterlockedPopEntrySList"
    },
    {
        "f_1": "RtlQueryDepthSList",
        "name": "QueryDepthSList"
    },
    {
        "f_1": "InterlockedPopEntrySList",
        "f_2": "RtlInterlockedPopEntrySList",
        "name": "RtlInterlockedFlushSList"
    },
    {
        "f_1": "InterlockedPopEntrySList",
        "name": "RtlInterlockedPopEntrySList"
    },
    {
        "f_1": "QueryDepthSList",
        "name": "RtlQueryDepthSList"
    },
    {
        "f_1": "GlobalHandle",
        "name": "LocalHandle"
    },
    {
        "f_1": "GlobalLock",
        "name": "LocalLock"
    },
    {
        "f_1": "GlobalSize",
        "name": "LocalSize"
    },
    {
        "f_1": "CreateFiber",
        "f_2": "CreateFiberEx",
        "name": "ConvertThreadToFiber"
    },
    {
        "f_1": "CreateFiberEx",
        "f_2": "CreateFiber",
        "name": "ConvertThreadToFiberEx"
    },
    {
        "name": "CreateFiberEx",
        "f_1": "CreateFiber",
        "f_2": "ConvertThreadToFiberEx"
    },
    {
        "f_1": "CreateFiberEx",
        "name": "CreateFiber",
        "f_2": "ConvertThreadToFiberEx"
    },
    {
        "f_1": "ExitThread",
        "name": "ExitProcess"
    },
    {
        "f_1": "ExitProcess",
        "name": "ExitThread"
    },
    {
        "f_1": "GetActiveProcessorGroupCount",
        "name": "GetActiveProcessorCount"
    },
    {
        "f_1": "GetDisplayAutoRotationPreferences",
        "name": "GetDisplayAutoRotationPreferencesByProcessId"
    },
    {
        "f_1": "GetDisplayAutoRotationPreferencesByProcessId",
        "name": "GetDisplayAutoRotationPreferences"
    },
    {
        "f_1": "GetExitCodeThread",
        "name": "GetExitCodeProcess"
    },
    {
        "f_1": "GetExitCodeProcess",
        "name": "GetExitCodeThread"
    },
    {
        "f_1": "GetNumaAvailableMemoryNodeEx",
        "name": "GetNumaAvailableMemoryNode"
    },
    {
        "f_1": "GetNumaAvailableMemoryNode",
        "name": "GetNumaAvailableMemoryNodeEx"
    },
    {
        "f_1": "GetNumaNodeNumberFromHandle",
        "name": "GetNumaHighestNodeNumber"
    },
    {
        "f_1": "GetNumaHighestNodeNumber",
        "f_1_comment": "Need to get handle of the highest node number",
        "name": "GetNumaNodeNumberFromHandle"
    },
    {
        "f_1": "GetNumaNodeProcessorMaskEx",
        "name": "GetNumaNodeProcessorMask"
    },
    {
        "f_1": "GetNumaNodeProcessorMask",
        "name": "GetNumaNodeProcessorMaskEx"
    },
    {
        "f_1": "GetNumaProcessorNodeEx",
        "name": "GetNumaProcessorNode"
    },
    {
        "f_1": "GetNumaProcessorNode",
        "name": "GetNumaProcessorNodeEx"
    },
    {
        "f_1": "GetProcessIdOfThread",
        "name": "GetProcessId"
    },
    {
        "f_1": "GetProcessId",
        "name": "GetProcessIdOfThread"
    },
    {
        "f_1": "GetProcessWorkingSetSizeEx",
        "name": "GetProcessWorkingSetSize"
    },
    {
        "f_1": "GetProcessWorkingSetSize",
        "name": "GetProcessWorkingSetSizeEx"
    },
    {
        "f_1": "GetThreadId",
        "comments": "If returns ID then could be used in place of GetThreadId\n",
        "name": "GetThreadInformation"
    },
    {
        "f_1": "LeaveCriticalSection",
        "name": "LeaveCriticalSectionWhenCallbackReturns"
    },
    {
        "f_1": "CreateJobObject",
        "f_1_comment": "This API creates & opens job objects",
        "name": "OpenJobObject"
    },
    {
        "f_1": "CreateProcess",
        "name": "OpenProcess"
    },
    {
        "f_1": "CreateThread",
        "name": "OpenThread"
    },
    {
        "f_1": "QueryIdleProcessorCycleTimeEx",
        "name": "QueryIdleProcessorCycleTime"
    },
    {
        "f_1": "QueryIdleProcessorCycleTime",
        "name": "QueryIdleProcessorCycleTimeEx"
    },
    {
        "f_1": "SetThreadpoolTimerEx",
        "name": "SetThreadpoolTimer"
    },
    {
        "f_1": "SetThreadpoolTimer",
        "name": "SetThreadpoolTimerEx"
    },
    {
        "f_1": "SetThreadpoolWaitEx",
        "name": "SetThreadpoolWait"
    },
    {
        "f_1": "SetThreadpoolWait",
        "name": "SetThreadpoolWaitEx"
    },
    {
        "f_1": "SetThreadPriority",
        "name": "SetThreadPriorityBoost"
    },
    {
        "f_1": "SleepEx",
        "name": "Sleep"
    },
    {
        "f_1": "Sleep",
        "name": "SleepEx"
    },
    {
        "f_1": "TerminateProcess",
        "f_2": "NtTerminateThread",
        "name": "TerminateThread"
    },
    {
        "f_1": "WSAGetServiceClassNameByClassId",
        "name": "WSAGetServiceClassInfo"
    },
    {
        "f_1": "WSAGetServiceClassInfo",
        "name": "WSAGetServiceClassNameByClassId"
    },
    {
        "comments": "Could be similar to ntohl etc\n",
        "name": "WSANtohl"
    },
    {
        "comments": "Could be similar to ntohl etc\n\n",
        "name": "WSANtohs"
    },
    {
        "comments": "Could use WSASendMsg to send disconnect data\n",
        "name": "WSASendDisconnect"
    },
    {
        "comments": "After VerFindFile\n",
        "name": "VerInstallFile"
    },
    {
        "f_1": "RegQueryValue",
        "name": "RegQueryValueExW"
    },
    {
        "f_1": "NtRenameKey",
        "name": "RegCopyTree"
    },
    {
        "f_1": "RegDeleteKeyEx",
        "name": "RegDeleteKey"
    },
    {
        "f_1": "RegDeleteKey",
        "name": "RegDeleteKeyEx"
    },
    {
        "f_1": "NtDeleteValueKey",
        "name": "RegDeleteKeyValue"
    },
    {
        "f_1": "RegDeleteKeyValue",
        "f_2": "RegDeleteValue",
        "name": "RegDeleteTree"
    },
    {
        "f_1": "RegDeleteKeyValue",
        "f_2": "RegDeleteTree",
        "f_3": "NtDeleteValueKey",
        "name": "RegDeleteValue"
    },
    {
        "f_1": "RegEnumValue",
        "name": "RegEnumKeyEx"
    },
    {
        "f_1": "RegEnumValueEx",
        "name": "RegEnumValue"
    },
    {
        "f_1": "RegQueryValue",
        "name": "RegQueryValueEx"
    },
    {
        "f_1": "SetDllDirectory",
        "name": "SetDefaultDllDirectories"
    },
    {
        "f_1": "SetDefaultDllDirectories",
        "name": "SetDllDirectory"
    },
    {
        "f_1": "DeleteFileTransactedA",
        "f_2": "SHFileOperationA",
        "f_3": "RemoveDirectoryA",
        "name": "DeleteFileW"
    },
    {
        "comments": "Can be replaced by own function since the function looks like a general utility function\n",
        "name": "InternetCrackUrlW"
    },
    {
        "comments": "Refer to registry API functions\n",
        "name": "RegQueryInfoKeyA"
    },
    {
        "f_1": "InternetConnectA",
        "name": "InternetConnectW"
    },
    {
        "f_1": "ShellExecuteA",
        "name": "ShellExecuteExW"
    },
    {
        "f_1": "GetKeyState",
        "name": "GetAsyncKeyState"
    },
    {
        "f_1": "HttpSendRequestEx",
        "name": "HttpSendRequestA"
    },
    {
        "f_1": "SHGetFolderPathW",
        "name": "GetSystemWindowsDirectoryW"
    },
    {
        "f_1": "LoadString",
        "f_2": "LoadStringA",
        "name": "LoadStringW"
    },
    {
        "f_1": "GetDiskFreeSpaceA",
        "f_2": "GetDiskFreeSpaceW",
        "f_3": "GetDiskFreeSpaceExW",
        "name": "GetDiskFreeSpaceExW"
    },
    {
        "comments": "Option flags: https://docs.microsoft.com/en-us/windows/desktop/WinInet/option-flags\n",
        "name": "InternetSetOptionA"
    },
    {
        "f_1": "HttpOpenRequestA",
        "name": "HttpOpenRequestW"
    },
    {
        "f_1": "SetFileAttributesTransactedA",
        "name": "SetFileAttributesW"
    },
    {
        "f_1": "CloseHandle",
        "name": "InternetCloseHandle"
    },
    {
        "f_1": "RegDeleteValue",
        "name": "RegDeleteValueA"
    },
    {
        "f_1": "GetComputeNameA",
        "name": "GetComputerNameW"
    },
    {
        "f_1": "SetFileAttributesW",
        "name": "GetFileAttributesExW"
    },
    {
        "f_1": "CreateDirectory",
        "name": "CreateDirectoryExW"
    },
    {
        "f_1": "NtTerminateThread",
        "f_2": "TerminateThread",
        "f_3": "TerminateProcess",
        "name": "NtTerminateThread"
    },
    {
        "f_1": "NtSetInformationFile",
        "name": "SetFileInformationByHandle"
    },
    {
        "f_1": "CreateFile",
        "name": "CopyFileA"
    },
    {
        "name": "CreateFile",
        "f_1": "CopyFileA"
    },
    {
        "f_1": "RegDeleteValue",
        "name": "RegDeleteValueW"
    },
    {
        "f_1": "GetDirectoryPath",
        "name": "GetTempPathW"
    },
    {
        "f_1": "CryptAcquireContextA",
        "name": "CryptAcquireContextW"
    },
    {
        "f_1": "GetConnectivity",
        "name": "InternetGetConnectedStateExA"
    },
    {
        "f_1": "GetKeyState",
        "name": "GetKeyboardState"
    },
    {
        "f_1": "GetUserNameEx",
        "comments": "Could be possible to do it after getting other identifying information from the thread\n",
        "name": "GetUserNameA"
    },
    {
        "f_1": "VirtualAlloc",
        "f_2": "VirtualAllocEx",
        "name": "NtAllocateVirtualMemory"
    },
    {
        "f_1": "RegEnumKey",
        "name": "RegEnumKeyExW"
    },
    {
        "f_1": "GetKeyboardState",
        "name": "GetKeyState"
    },
    {
        "f_1": "CopyFile",
        "f_2": "WriteFile",
        "name": "NtWriteFile"
    },
    {
        "f_1": "GetConnectivity",
        "name": "InternetGetConnectedState"
    },
    {
        "comments": "Could use other directory retrieval functions\n",
        "name": "GetSystemWindowsDirectoryA"
    },
    {
        "comments": "Opposite NtGetContextThread\n",
        "name": "NtSetContextThread"
    },
    {
        "comments": "Can copy data in the specified address space and read it\n",
        "name": "ReadProcessMemory"
    },
    {
        "f_1": "TerminateProcess",
        "name": "NtTerminateProcess"
    },
    {
        "f_1": "GetFileSize",
        "name": "GetFileSizeEx"
    },
    {
        "comments": "Again should be able to read information through other read functio s\n",
        "name": "InternetReadFile"
    },
    {
        "f_1": "CoCreateInstance",
        "name": "CoCreateInstanceEx"
    },
    {
        "name": "CoCreateInstance",
        "f_1": "CoCreateInstanceEx"
    },
    {
        "comments": "Deprecated. Can use Crypto Next Gen APIs.\n",
        "name": "CryptCreateHash"
    },
    {
        "comments": "Can use Reg key value reader functions.\n\n\n",
        "name": "NtQueryMultipleValueKey"
    },
    {
        "f_1": "GetFileSizeEx",
        "name": "GetFileSize"
    },
    {
        "f_1": "FindWindow",
        "name": "FindWindowExA"
    },
    {
        "f_1": "RegEnumValueEx",
        "f_2": "RegEnumValue",
        "name": "RegEnumValueA"
    },
    {
        "f_1": "FindResource",
        "comments": "For example, an application can use the LoadIcon function to load an icon for display on the screen. However, the application should use FindResource and LoadResource if it is loading the icon to copy its data to another application.String resources are stored in sections of up to 16 strings per section. The strings in each section are stored as a sequence of counted (not necessarily null-terminated) Unicode strings. The LoadString function will extract the string resource from its corresponding section.\n",
        "name": "FindResourceExA"
    },
    {
        "comments": "Remains to be seen if we can use other functions to send this message\n",
        "name": "SendNotifyMessageA"
    },
    {
        "comments": "Can get this short path and then use GetLongPathNameA to get the long path. Or can use FindFirstFileA\n\n",
        "name": "GetShortPathNameW"
    },
    {
        "f_1": "InternetConnectW",
        "name": "InternetConnectA"
    },
    {
        "f_1": "RegEnumKeyExA",
        "name": "RegEnumKeyW"
    },
    {
        "f_1": "InternetGetConnectedState",
        "f_2": "GetConnectivity",
        "name": "InternetGetConnectedStateExW"
    },
    {
        "f_1": "RegEnumKey",
        "name": "RegEnumKeyExA"
    },
    {
        "f_1": "RegQueryValue",
        "name": "RegQueryValueExA"
    },
    {
        "f_1": "CopyFile",
        "f_2": "CreateFile",
        "f_3": "CopyFileEx",
        "name": "CopyFileW"
    },
    {
        "name": "CopyFile",
        "f_1": "CreateFile",
        "f_2": "CopyFileEx",
        "f_3": "CopyFileW"
    },
    {
        "f_1": "CopyFile",
        "name": "CreateFile",
        "f_2": "CopyFileEx",
        "f_3": "CopyFileW"
    },
    {
        "f_2": "CopyFile",
        "f_1": "CreateFile",
        "name": "CopyFileEx",
        "f_3": "CopyFileW"
    },
    {
        "f_1": "SendNotifyMessageA",
        "f_2": "SendNotifyMessage",
        "name": "SendNotifyMessageW"
    },
    {
        "f_1": "OpenServiceW",
        "name": "OpenServiceA"
    },
    {
        "f_1": "GetDiskFreeSpaceExW",
        "name": "GetDiskFreeSpaceW"
    },
    {
        "comments": "See Reg functions\n",
        "name": "NtSetValueKey"
    },
    {
        "f_1": "OutputDebugStringW",
        "name": "OutputDebugStringA"
    },
    {
        "f_1": "GetUserName",
        "comments": "Should see if username can be retrieved through other functions which return thread information.\n",
        "name": "GetUserNameExA"
    },
    {
        "f_1": "CreateServiceW",
        "name": "CreateServiceA"
    },
    {
        "comments": "Can replace with own function\n",
        "name": "InternetCrackUrlA"
    },
    {
        "comments": "See Reg functions\n",
        "name": "RegQueryInfoKeyW"
    },
    {
        "comments": "Could potential replace HTTPOpen & FtpOpenFile\n",
        "name": "InternetOpenUrlA"
    },
    {
        "f_1": "FindFirstFile",
        "name": "FindFirstFileExA"
    },
    {
        "f_1": "ZwLoadDriver",
        "name": "NtLoadDriver"
    },
    {
        "f_1": "GetFileVersionInfoSizeA",
        "name": "GetFileVersionInfoSizeExW"
    },
    {
        "f_1": "DeleteUrlCacheEntryA",
        "name": "DeleteUrlCacheEntryW"
    },
    {
        "f_1": "DrawTextExW",
        "name": "DrawTextExA"
    },
    {
        "f_1": "SHFileOperationA",
        "f_2": "RemoveDirectoryW",
        "f_3": "RemoveDllDirectory",
        "name": "RemoveDirectoryA"
    },
    {
        "f_1": "SHFileOperationA",
        "f_2": "RemoveDirectoryA",
        "f_3": "RemoveDllDirectory",
        "name": "RemoveDirectoryW"
    },
    {
        "name":"SHFileOperationA",
        "f_1": "RemoveDirectoryA",
        "f_2": "RemoveDllDirectory",
        "f_3": "RemoveDirectoryW"
    },
    {
        "f_1": "SetFileInformationByHandle",
        "name": "NtSetInformationFile"
    },
    {
        "f_1": "CreateFile",
        "name": "CopyFileExW"
    },
    {
        "name": "CreateFile",
        "f_1": "CopyFileExW"
    },
    {
        "comments": "See Reg functions\n",
        "name": "NtCreateKey"
    },
    {
        "f_1": "GetFileInformationByHandle",
        "name": "GetFileInformationByHandleEx"
    },
    {
        "f_1": "GetComputerNameW",
        "comments": "Should be able to read from registry key\n",
        "name": "GetComputerNameA"
    },
    {
        "f_1": "HttpOpenRequestW",
        "comments": "InternetOpenUrlA\n",
        "name": "HttpOpenRequestA"
    },
    {
        "f_1": "GetFileVersionInfoEx",
        "name": "GetFileVersionInfoW"
    },
    {
        "f_1": "FindWindow",
        "f_2": "EnumWindows",
        "f_3": "RealGetWindowClass",
        "name": "FindWindowExW"
    },
    {
        "f_1": "GetFileInformationByHandleEx",
        "name": "NtQueryInformationFile"
    },
    {
        "name": "GetFileInformationByHandleEx",
        "f_1": "NtQueryInformationFile"
    },
    {
        "f_1": "DnsQuery_W",
        "f_2": "DnsQuery_UTF8",
        "name": "DnsQuery_A"
    },
    {
        "f_1": "FindFirstFile",
        "name": "FindFirstFileExW"
    },
    {
        "comments": "Can be used with FindResource to replace other load functions like loadcursor, loadicon, loadimage\n",
        "name": "LoadResource"
    },
    {
        "f1": "GetFileVersionInfoSize",
        "name": "GetFileVersionInfoSizeW"
    },
    {
        "f1": "GetFileVersionInfoEx",
        "name": "GetFileVersionInfoExW"
    },
    {
        "f_1": "ZwEnumerateKey",
        "name": "NtEnumerateKey"
    },
    {
        "name": "FindWindowA",
        "f_1":"FindWindow"
    },
    {
        "f_1": "GetFileInformationByHandleEx",
        "name": "GetFileInformationByHandle"
    },
    {
        "f_1": "HttpSendRequestEx",
        "name": "HttpSendRequestW"
    },
    {
        "f_1": "CryptAcquireContextW",
        "name": "CryptAcquireContextA"
    },
    {
        "comments": "See other OpenService\n",
        "name": "OpenServiceW"
    },
    {
        "comments": "Can be used with update token privilege function\n",
        "name": "LookupPrivilegeValueW"
    },
    {
        "comments": "See other FindWindow functions\n",
        "name": "FindWindowW"
    },
    {
        "f_1": "ZwMapViewOfSection",
        "name": "NtMapViewOfSection"
    },
    {
        "f_1": "RegOpenKeyTransacted",
        "f_2": "RegOpenKeyExW",
        "f_3": "RegOpenKey",
        "name": "RegOpenKeyExA"
    },
    {
        "comments": "Could potential replace HTTPOpen & FtpOpenFile\n",
        "name": "InternetOpenUrlW"
    },
    {
        "f_1": "ZwEnumerateValueKey",
        "comments": "Other reg functions\n",
        "name": "NtEnumerateValueKey"
    },
    {
        "comments": "Can be used in place of other functions which send data.\n",
        "name": "InternetWriteFile"
    },
    {
        "f_1": "GetUserName",
        "f_2": "GetUserNameA",
        "name": "GetUserNameExW"
    },
    {
        "f_1": "GetFileAttributesEx",
        "name": "GetFileAttributesW"
    },
    {
        "f_1": "CoInitialize",
        "name": "CoInitializeEx"
    },
    {
        "name": "CoInitialize",
        "f_1": "CoInitializeEx"
    },
    {
        "comments": "Sleep",
        "name": "NtDelayExecution"
    },
    {
        "f_1": "StartServiceA",
        "name": "StartServiceW"
    },
    {
        "f_1": "GetFileSize",
        "name": "SizeofResource"
    },
    {
        "f_1": "GetUserNameEx",
        "name": "GetUserNameW"
    },
    {
        "f_1": "RegEnumValueEx",
        "name": "RegEnumValueW"
    },
    {
        "f_1": "CertOpenStore",
        "name": "CertOpenSystemStoreA"
    },
    {
        "name": "CertOpenStore",
        "f_1": "CertOpenSystemStoreA"
    },
    {
        "f_1": "StartServiceW",
        "name": "StartServiceA"
    },
    {
        "f_1": "MoveFileExA",
        "name": "MoveFileWithProgressA"
    }
]
