import numpy as np
from Dataset import readSamples,readSample,loadSurrogate,readAllData
from Utilities import list_rindex
from Swarm import Swarm
from keras.preprocessing import sequence
from Mappings import Mappings

numOfParticles=10
dLength=25000
maxQueries=10000
stoppingThreshold=0.99
randomMutations=0.1
C1=1
C2=1

def logPSOOutput():
    samples=readSamples()
    with open('Malware_Samples_PSO_Results.csv','w') as f:
        f.write('Sample,Sample_Sequence_Length,Number_of_Initial_Mappings,BaselineCofidence,BaselineFitness,Prediction_Before_PSO, Confidence_After_PSO,Fitness_After_PSO,Prediction_After_PSO,Iteration,Number_of_Required_Changes,Number_Of_Queries\n')
    i=0
    for samplePath in samples:
#        firstBackslashIndex=list_rindex(samplePath,'\\')
#        secondBackslashIndex=list_rindex(samplePath[:firstBackslashIndex],'\\')
#        thirdBackslashIndex=list_rindex(samplePath[:secondBackslashIndex],'\\')
#        sampleNumber=samplePath[thirdBackslashIndex+1:secondBackslashIndex]
        sample=readSample(samplePath)
        length=(len(sample))
        swarm=Swarm(numOfParticles,dLength,stoppingThreshold,randomMutations,maxQueries,sample,C1,C2)
        numberOfPotentialMappings=0 
        for pos in swarm.inputX:
            if pos==0:
                continue
            elif pos in swarm.mappings.apiMappingsDict.keys():
                numberOfPotentialMappings=numberOfPotentialMappings+1
        baselineConfidence,pred=swarm.calculateBaselineConfidence()
        pred=np.argmax(pred)
        if pred == 0:
            continue
        print("Searching Optimum Advresarial Example... %s\n"%(i))
        swarm.initializeSwarmAndParticles()                
        print('Number of Potential Mappings %s\n'%(numberOfPotentialMappings))
        print('Model Prediction Before PSO= %s\n'%(pred))
        print('Baseline Confidence= %s\n'%(str(baselineConfidence)))
        print('Baseline Fitness= %s\n'%(str(1-baselineConfidence)))
        _,_,iterations,numberOfQueries=swarm.searchOptimum()
        modelConfidence=baselineConfidence-swarm.bestFitness
        print('Model Confindence After PSO %s'%(modelConfidence))
        print('Best Fitness Score= %s'%(swarm.bestFitness))
        changes=sum([1 for index,value in enumerate(swarm.inputX) if not swarm.inputX[index] == swarm.bestPosition[index] ])
        predAfter=swarm.targetModel.predict_classes(np.asarray([swarm.bestPosition]),batch_size=1)[0]
        print('Model Prediction After PSO= %s'%(str(predAfter)))
        print('Total number of changes= %s'%(swarm.numberOfChanges))
        print('Required number of changes= %s'%(changes))
        with open('Malware_Samples_PSO_Results.csv','a') as f:
            f.write('%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s\n'%(samplePath,str(length),str(numberOfPotentialMappings),str(baselineConfidence),str(1-baselineConfidence),str(pred),str(modelConfidence),str(swarm.bestFitness),str(predAfter),str(iterations),str(changes),str(numberOfQueries)))
        i=i+1
            
        
def testModel():
    X,Y=readAllData()
    model=loadSurrogate()
    mappings=Mappings()
    res=[]
    i=1
    for x,y in zip(X,Y):
        print('Sample %s\n'%i)
        inputX=x
        inputX=mappings.Custom_Embedding([inputX])
        inputX=sequence.pad_sequences(inputX, maxlen=dLength)[0]
        proba=model.predict(np.asarray([inputX]),batch_size=1)
        if np.argmax(proba)==np.argmax(y):
            res.append(1)
        else:
            res.append(0)
        i=i+1
    print('Accuracy %s\n'%(sum(res)/len(res)))
    
    
if __name__ == "__main__":
    logPSOOutput()