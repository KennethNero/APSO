import os
from keras.models import model_from_json

def readSamples(inMaldir=os.path.join('Test_Samples','Malware','Preprocessed')):
    malDirs=os.listdir(inMaldir)
    files=[]
    for samples in malDirs:
        procsDir=os.path.join(inMaldir,samples)
        allProcs=os.listdir(procsDir)
        for procs in allProcs:
            artDir=os.path.join(procsDir,procs)
            filespath=os.path.join(artDir,'APICallTrace.txt')
            if 'root' in procs:
                files.append(filespath)
    return files
    
    
def loadSurrogate():
    with open('LSTM_API_FULLMODEL_LSTM_25000TIMESTEPS_EPOCHS_200_Model.json', 'r') as json_file:
        loaded_model_json = json_file.read()
    surrogateModel = model_from_json(loaded_model_json)
    surrogateModel.load_weights('LSTM_API_FULLMODEL_LSTM_25000TIMESTEPS_EPOCHS_200_Weights.h5')
    surrogateModel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
    return surrogateModel
    
def readSample(filePath):
    with open(filePath,'r',encoding="utf-8") as f:
        data=f.read()[:-2]
        data=data.lower()
        return data
        
def readAllData(inp=os.path.join('.','Test_Samples')):
    data=[]
    labels=[]
    maldir=os.path.join(inp,'Malware','Preprocessed')
    bendir=os.path.join(inp,'Benignware','Preprocessed')
    malFiles=os.listdir(maldir)
    benFiles=os.listdir(bendir)
    for files in malFiles:
        f=os.path.join(maldir,files)
        procs=os.listdir(f)
        for p in procs:
            if not 'rootProc' in p:
                continue
            inp=os.path.join(f,p,'APICallTrace.txt')
            with open(inp,'r',encoding='utf-8') as f:
               lines=f.read()
            data.append(lines[:-2].lower())
            labels.append(lines[-1])
    for files in benFiles:
        f=os.path.join(bendir,files)
        procs=os.listdir(f)
        for p in procs:
            if not 'rootProc' in p:
                continue
            inp=os.path.join(f,p,'APICallTrace.txt')
            with open(inp,'r',encoding='utf-8') as f:
               lines=f.read()
            data.append(lines[:-2].lower())
            labels.append(lines[-1])
    labels=[[1,0] if l=='0' else [0,1] for l in labels]
    numBen=labels.count([1,0])
    numMal=labels.count([0,1])
    print("READING FILE SUCCESS: Num of Ben %s, Num of Mal %s \n"%(str(numBen),str(numMal)))
    return data,labels

        
        
    
